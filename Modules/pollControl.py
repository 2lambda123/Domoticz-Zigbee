#!/usr/bin/env python3
# coding: utf-8 -*-
#
# Author:  pipiche38
#
"""
    Module: pollControl.py

    Description: Implement the Poll Control commands

"""
#  An End Device cannot receive data packets directly, as it may be asleep when a packet arrives. 
#  The data packets for an End Device are therefore buffered by the device’s parent and 
#  the End Device polls its parent for data while awake. An individual data packet will only be held
#  on the parent node for a maximum of 7.68 seconds and if many packets for the End Device are expected
#  over a short period of time, the End Device should retrieve these packets as quickly as possible.
#  An End Device can implement two polling modes, which are dependent on 
#  the poll interval (time-period between consecutive polls):
#      Normal poll mode: A long poll interval is used - this mode is appropriate when the End Device is not expecting data packets
#      Fast poll mode: A short poll interval is used - this mode is appropriate when the End Device is expecting data packets 
#
# https://zigbeealliance.org/wp-content/uploads/2019/12/07-5123-06-zigbee-cluster-library-specification.pdf
# Page 239
#
import Domoticz

from Modules.basicOutputs import raw_APS_request


def receive_poll_cluster( self, srcnwkid, srcep, cluster, dstnwkid, dstep, Sqn, ManufacturerCode, Command, Data ):
    # Poll Control: Check-in Response

    if Command == '00': # We receive a Poll Checking Command
        poll_fast_poll_stop( self, Sqn, srcnwkid, srcep)   # Stop Fast poll
        poll_checkin_response_command( self, Sqn, srcnwkid, srcep, ContinueFastPoll = True, DurationFastPoll = 0xFC0 )


def poll_checkin_command( self, Sqn, snwkid, ep ):
    # Server -> End Device
    # The Poll Control Cluster server sends out a Check-in command to the devices to which it is paired based on the server’s Check-inIntervalattribute.
    # It does this to find out if any of the Poll Control Cluster Clients with which it is paired are interested in having it enter fastpoll mode 
    # so that it can be managed. This request is sent out based on either the Check-inInterval, 
    # or the next Check-in value in the Fast Poll Stop Request generated by the Poll Control Cluster Client.
    # The Check-in command expects a Check-in Response command to be sent back from the Poll Control Client. 
    # If the Poll Control Server does not receive a Check-in response back from the Poll Control Client up to7.68 seconds 
    # it is free to return to polling according to the LongPollInterval.

    cmd = '00'
    data = ''

    return


def poll_checkin_response_command( self, Sqn, nwkid, ep, ContinueFastPoll = True, DurationFastPoll = 0xFC0):
    
    # Poll Control: Check-in Response
    # 0 quarterseconds ( 0xFC0 => 1 minute of Fast Polling)

    if nwkid not in self.ListOfDevices:
        Domoticz.Error(" - nwkid: %s do not exist" %nwkid)
        return

    cluster_id = '0020' # Poll Control Cluster
    cmd = '00' # Check-in Response
    startFastPolling = '%02x' %ContinueFastPoll
    fastPollTimeout = '%04x' %DurationFastPoll 

    cluster_frame = '11'
   
    payload = cluster_frame + Sqn + cmd + startFastPolling + fastPollTimeout
    raw_APS_request( self, nwkid, ep, '0020', '0104', payload)
    Domoticz.Log("Accept Fast Poll command 0x%s for %s/%s with payload: %s" %(cmd, nwkid, ep, payload))

def poll_fast_poll_stop( self, Sqn, nwkid, ep):

    # Fast Poll Stop to be called for Remote Devices

    if nwkid not in self.ListOfDevices:
        Domoticz.Error("Fast Poll Stop - nwkid: %s do not exist" %nwkid)
        return

    cluster_id = '0020' # Poll Control Cluster
    cmd = '01' # Fast Poll Stop ( no data)

    cluster_frame = '11'

    payload = cluster_frame + Sqn + cmd
    raw_APS_request( self, nwkid, ep, '0020', '0104', payload)
    Domoticz.Log("send Fast Poll Stop command 0x%s for %s/%s with payload: %s" %(cmd, nwkid, ep, payload))

def poll_set_long_poll_interval( self, nwkid, ep ):

    cmd = '02'
    NewLongPollInterval = '00000000' # unint32

    return

def poll_set_short_poll_interval( self, nwkid, ep):

    cmd = '03'
    NewShortPollInterval = '0000'


    return